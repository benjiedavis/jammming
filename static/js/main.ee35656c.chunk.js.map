{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/PlayList/PlayList.js","util/Spotify.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","handleSearch","bind","handleTermChange","state","term","e","this","search","preventDefault","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","renderAction","track","onAdd","console","log","onRemove","isRemoval","name","artist","album","TrackList","tracksArray","tracks","Array","from","map","key","id","SearchResults","searchResults","PlayList","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","accessToken","expiresIn","redirect_uri","process","URL","Spotify","getAccessToken","window","location","href","match","setTimeout","history","pushState","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","getUserId","getPlaylistId","userId","method","body","JSON","stringify","addTracks","playlistID","trackURIs","uris","savePlaylist","App","updatePlaylistName","playlistName","newPlaylistTracks","find","savedTrack","push","filter","currentTrack","results","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ee35656c.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.state = {\n            term: ''\n        }\n    }\n    \n    handleSearch(e){\n        this.props.search(this.state.term);\n        e.preventDefault();\n\n    }\n    \n    handleTermChange(e){\n        this.setState({term:e.target.value});\n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input placeholder=\"Enter A Song, Album, or Artist\"\n                    onChange={this.handleTermChange} />\n                <button onClick={this.handleSearch} className=\"SearchButton\">SEARCH</button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack=this.removeTrack.bind(this);\n    this.renderAction=this.renderAction.bind(this);\n  }\n\n  addTrack(track) {\n    this.props.onAdd(this.props.track);\n  }\n\n  \n\n  removeTrack(track){\n    console.log('HERE')\n     this.props.onRemove(this.props.track);\n  }\n\n\n  renderAction(isRemoval, track) {\n    if (isRemoval===\"true\") {\n      return <button\n        className='Track-action'\n        onClick={this.removeTrack}\n        >-</button>\n    } else {\n      return <button\n        onClick={this.addTrack}\n        className='Track-action'>\n        +</button>\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n        {this.renderAction(this.props.isRemoval, this.props.track)}\n      </div>\n    )\n  }\n}\n\nexport default Track;\n","import React from 'react';\nimport './TrackList.css';\nimport '../Track/Track';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {\n    render() {\n        let tracksArray = this.props.tracks?Array.from(this.props.tracks):[];\n        return (\n            <div className=\"TrackList\">\n                {tracksArray.map\n                ((track) => {\n                    return (<Track\n                        key={track.id}\n                        track={track}\n                        isRemoval={this.props.isRemoval}\n                        onAdd={this.props.onAdd}\n                        onRemove={this.props.onRemove}\n                    />);\n                }\n                )\n                }\n            </div>\n        );\n    }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css';\nimport '../TrackList/TrackList';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList\n                    tracks={this.props.searchResults}\n                    onAdd={this.props.onAdd}\n                    isRemoval='false' />\n            </div>\n        )\n    }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport './PlayList.css';\nimport '../TrackList/TrackList';\nimport TrackList from '../TrackList/TrackList';\n\nclass PlayList extends React.Component {\n    constructor(props){\n        super(props);\n        this.handleNameChange=this.handleNameChange.bind(this);\n    }    \n        \n    handleNameChange(e){\n        this.props.onNameChange(e.target.value);\n        e.preventDefault();\n\n    }\n    \n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input defaultValue={'New Playlist'} \n                    onChange={this.handleNameChange} />\n                <TrackList\n                    tracks={this.props.playlistTracks}\n                    onRemove={this.props.onRemove} \n                    isRemoval=\"true\"/>\n                <button className=\"Playlist-save\"\n                    onClick={this.props.onSave}\n                    >SAVE TO SPOTIFY</button>\n            </div>\n        )\n    }\n}\n\nexport default PlayList;\n","// const { default: SearchBar } = require(\"../Components/SearchBar/SearchBar\");\n\nlet accessToken = '';\nlet expiresIn = '';\nvar client_id = 'baf26983f8564dce9393d1eb5ad74749'; // Your client id\nvar redirect_uri = \"http://localhost:3000/\"; // Your redirect uri\nconsole.log('env');\nconsole.log(process.env.NODE_ENV);\nif (process.env.NODE_ENV==='production'){\n    redirect_uri = \"https://benjiedavis.github.io/jammming/\"\n};\nlet URL = '';\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken !== '') {\n            console.log('A');\n            return accessToken;\n        }\n\n        URL = window.location.href;\n        console.log('HEREMATCH');\n        console.log(URL.match(/access_token=([^&]*)/));\n        if (URL.match(/access_token=([^&]*)/)) {\n            accessToken = URL.match(/access_token=([^&]*)/)[1];\n            expiresIn = URL.match(/expires_in=([^&]*)/)[1];\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            console.log('B');\n            return accessToken;\n        } else {\n            window.location.href = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirect_uri}`\n            console.log('C');\n            URL = window.location.href;\n            accessToken = URL.match(/access_token=([^&]*)/)[1];\n            expiresIn = URL.match(/expires_in=([^&]*)/)[1];\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        }\n\n\n    },\n\n    search(term) {\n        accessToken = this.getAccessToken();\n        return (fetch(`https://cors-anywhere.herokuapp.com/https://api.spotify.com/v1/search?type=track&q=${term}`,\n            {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`\n                }\n            })\n            .then(response => { return response.json(); })\n            .then(jsonResponse => {\n                if (jsonResponse.tracks) {\n                    return (jsonResponse.tracks.items.map(track => {\n                        return ({\n                            id: track.id,\n                            name: track.name,\n                            artist: track.artists[0].name,\n                            album: track.album.name,\n                            uri: track.uri\n                        })\n                    }))\n                }\n            }\n            )\n        );\n\n    },\n\n    getUserId() {\n        accessToken = this.getAccessToken();\n        return (fetch(`https://api.spotify.com/v1/me`,\n            {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                }\n            })\n            .then(response => {\n                return (response.json());\n            })\n            .then(jsonResponse => {\n                return jsonResponse.id;\n            })\n        );\n    },\n\n    getPlaylistId(name, userId) {\n        accessToken = this.getAccessToken();\n        console.log('name:');\n        console.log(name);\n        return (fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,\n            {\n                method: 'post',\n                headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    name: name\n                    // \"description\": \"New playlist description\",\n                    // \"public\": false\n                })\n            })\n            .then(response => {\n                console.log('playlist idjson:');\n                console.log(response);\n                return response.json();\n            })\n            .then(jsonResponse => {\n                return jsonResponse.id\n            })\n        )\n    },\n\n    addTracks(playlistID, trackURIs) {\n        accessToken = this.getAccessToken();\n\n        return (fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`,\n            {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                    'Content-Type': 'application/json',\n                },\n                method: 'post',\n                body: JSON.stringify({ uris: trackURIs }),\n            })\n        );\n    },\n\n\n    savePlaylist(name, trackURIs) {\n        accessToken = this.getAccessToken();\n\n        if (!name || !trackURIs) {\n            console.log('oops!');\n            return;\n        }\n        this.getUserId()\n            .then(userId => {\n                return this.getPlaylistId(name, userId);\n            })\n            .then(playlistID => {\n                return this.addTracks(playlistID, trackURIs);\n            });\n\n        \n    }\n\n}\n\nexport default Spotify;\n","import React from 'react';\nimport './App.css';\nimport '../SearchBar/SearchBar';\nimport SearchBar from '../SearchBar/SearchBar';\nimport '../SearchResults/SearchResults';\nimport SearchResults from '../SearchResults/SearchResults';\nimport '../PlayList/PlayList';\nimport PlayList from '../PlayList/PlayList';\nimport '../../util/Spotify';\nimport Spotify from '../../util/Spotify';\n\n//What it doesn't do: clear playlist name after save\n// search the first time you click search\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    };\n\n  }\n\n  addTrack(track) {\n    let newPlaylistTracks = Array.from(this.state.playlistTracks);\n    if (this.state.playlistTracks\n      .find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n\n    newPlaylistTracks.push(track);\n    this.setState({ playlistTracks: newPlaylistTracks });\n  }\n\n  removeTrack(track) {\n    var newPlaylistTracks =\n      this.state.playlistTracks.filter(function (currentTrack) {\n        return currentTrack.id !== track.id;\n      });\n\n    this.setState({ playlistTracks: newPlaylistTracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n\n  }\n\n  savePlaylist() {\n    let trackURIs = []\n    this.state.playlistTracks.map(track => {\n      return trackURIs.push(track.uri);\n    });\n    Spotify.savePlaylist(this.state.playlistName, trackURIs);\n    this.setState({\n      playlistTracks: [],\n      playlistName: 'New Playlist',\n    });\n  }\n\n  search(term) {\n    Spotify.search(term)\n      .then(results => {\n        this.setState({ searchResults: results });\n      });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar search={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack} />\n            <PlayList\n              playlistName={this.state.playlistName}\n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}